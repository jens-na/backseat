#!/usr/bin/env ruby

begin
  require 'backseat'
  require 'getoptlong'
  require 'yaml'
  require 'file'
rescue LoadError
  require 'rubygems'
  require 'backseat'
end

module Backseat

  # Returns the candidate to the config and the specified candidate name.
  # Args: 
  #  cfg - the backseat.yml config YAML
  #  cand_name - the candidates name
  def self.get_cand(cfg, cand_name)
    root = cfg['candidates'][cand_name]['root']
    expire = cfg['candidates'][cand_name]['notifications']['nobackup']['expire']
    cand = Candidate.new(cand_name, root, expire)
    return cand
  end

  # flags
  flag_notify = false
  flag_list_cand = false
  flag_expire_days = false
  flag_expired = false
  flag_expired_code = false
  
  # other vars
  cand_name = nil
  cand = nil
  file = "/etc/backseat.yml"
  root = "/srv/backseat/"

  opts = GetoptLong.new(
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--candidate', '-c', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--list-candidates', '-l', GetoptLong::NO_ARGUMENT ],
    [ '--expire-days', '-x', GetoptLong::NO_ARGUMENT ],
    [ '--expired', '-e', GetoptLong::NO_ARGUMENT ],
    [ '--expired-code', '-E', GetoptLong::NO_ARGUMENT ],
    [ '--notify', '-n', GetoptLong::NO_ARGUMENT ]
  )

  opts.each do |opt,arg|
    case opt
      when '--help'
        puts <<-EOF
Usage: backseat [OPTIONS]
An observer for network based backups

  -f, --file <file>
    an alternaive configuration file of backseat

  -c, --candidate <name>
    specifies the candidate to use

  -l, --list-candidates
    list the configured candidates

  -e, --expired
    check the expired state for a candidate

  -E, --expired-code
    like --expired but uses exit codes to signal expired state

  -x, --expire-days
    returns the configured expire time in days which is configured in 
    the backseat configuration file

  -h, --help
    show help

Report bugs to: jens@0x6a.de
backseat home page: <http://github.com/jens-na/backseat/>
        EOF
        exit 0
      when '--file'    
        file = arg
      when '--candidate'
        cand_name = arg
      when '--list-candidates'
        flag_list_cand = true
      when '--expired'
        flag_expired = true
      when '--expired-code'
        flag_expired_code = true
      when '--notify'
        flag_notify = true
      when '--expire-days'
        flag_expire_days = true
    end
  end
  
  config = Config.new(file)
  begin
    config.check
  rescue Exception => e
    puts e
    exit 1
  end

  cfg = config.cfg
  candidates = cfg['candidates']

  # list properly configured candidates
  if flag_list_cand
    candidates.each do |key,value|
      puts key
    end
    exit 0
  end

  # Prints the expire in days, which is configured in the backseat 
  # configuration file
  if flag_expire_days
    if cand_name == nil
      puts 'Backup candidate must be specifed with --candidate.'
      exit 1
    else
      cand = get_cand(cfg, cand_name)
      puts cand.expire
    end
    exit 0
  end

  # check if candidate is expired
  if flag_expired || flag_expired_code
    if cand_name == nil
      puts 'Backup candidate must be specifed with --candidate.'
      exit 1
    else
      cand = get_cand(cfg, cand_name)
      if cand.expired?
        if flag_expired_code
          exit 1
        else
          puts 'yes'
        end
      else
        if flag_expired_code
          exit 0
        else
          puts 'no'
        end
      end
    end
    exit 0
  end 

  # list a summary if the program is still active
  candidates.each do |key,value|
    cand = get_cand(cfg, key) 
    backups = cand.get_backups.length
    status = "not expired"

    if cand.expired?
      status = "expired"
    end
    puts "#{key}: #{backups} backups, #{status}"
  end

end
